package org.radarbase.appserver.jersey.service

import jakarta.inject.Inject
import jakarta.inject.Named
import org.radarbase.appserver.jersey.dto.ProjectDto
import org.radarbase.appserver.jersey.dto.ProjectDtos
import org.radarbase.appserver.jersey.enhancer.AppserverResourceEnhancer.Companion.PROJECT_MAPPER
import org.radarbase.appserver.jersey.entity.Project
import org.radarbase.appserver.jersey.exception.AlreadyExistsException
import org.radarbase.appserver.jersey.mapper.Mapper
import org.radarbase.appserver.jersey.mapper.ProjectMapper
import org.radarbase.appserver.jersey.repository.ProjectRepository
import org.radarbase.appserver.jersey.utils.checkInvalidProjectDetails
import org.radarbase.appserver.jersey.utils.checkPresence
import org.radarbase.jersey.exception.HttpNotFoundException
import org.slf4j.LoggerFactory

/**
 * Service class for managing projects.
 *
 * [Projects][Project] represent the same entities as in the [ManagementPortal](https://github.com/RADAR-base/ManagementPortal) and their names
 * should align with the projects in the [ManagementPortal](https://github.com/RADAR-base/ManagementPortal).
 *
 * It uses [ProjectRepository] for persistence operations and [ProjectMapper]
 * for converting between entity and DTO objects.
 */
@Suppress("unused")
class ProjectService @Inject constructor(
    private val projectRepository: ProjectRepository,
    @Named(PROJECT_MAPPER) private val projectMapper: Mapper<ProjectDto, Project>,
) {
    /**
     * Retrieves all projects from the repository.
     *
     * @return [ProjectDtos] object containing a list of all projects as DTOs.
     */
    suspend fun getAllProjects(): ProjectDtos {
        return projectRepository.findAll().let {
            projectMapper.entitiesToDtos(it).run {
                ProjectDtos(this.toMutableList())
            }
        }
    }

    /**
     * Retrieves a project by its unique identifier (ID).
     *
     * @param id the unique ID of the project
     * @return the [ProjectDto] of the project
     * @throws org.radarbase.jersey.exception.HttpNotFoundException if no project with the given ID exists
     */
    suspend fun getProjectById(id: Long): ProjectDto {
        val project: Project = checkPresence(projectRepository.find(id), "project_not_found") {
            "Project with id $id not found"
        }

        return projectMapper.entityToDto(project)
    }

    /**
     * Retrieves a project by its ManagementPortal project ID.
     *
     * @param projectId the unique project ID in the ManagementPortal
     * @return the [ProjectDto] of the project
     * @throws org.radarbase.jersey.exception.HttpNotFoundException if no project with the given project ID exists
     */
    suspend fun getProjectByProjectId(projectId: String): ProjectDto {
        val project = checkPresence(
            projectRepository.findByProjectId(projectId),
            "project_not_found",
        ) { "Project with projectId $projectId not found" }

        return projectMapper.entityToDto(project)
    }

    /**
     * Creates a new project in the repository.
     *
     * @param projectDTO the [ProjectDto] containing details of the project to create
     * @return the [ProjectDto] of the newly created project
     * @throws org.radarbase.appserver.jersey.exception.InvalidProjectDetailsException if the input contains invalid data
     * @throws AlreadyExistsException if the project is already present
     */
    suspend fun addProject(projectDTO: ProjectDto): ProjectDto {
        val projectId: String? = projectDTO.projectId

        logger.info("Adding project with id $projectId adding to project")

        checkInvalidProjectDetails(
            projectDTO,
            { projectDTO.id != null },
            { "'id' must not be supplied when creating a project, it is autogenerated" },
        )

        checkInvalidProjectDetails(
            projectDTO,
            { projectId == null },
            { "At least 'project id' must be supplied" },
        )

        if (projectRepository.existsByProjectId(projectId!!)) {
            throw AlreadyExistsException(
                "project_already_exists",
                "The project with specified project-id (${projectDTO.projectId}) already exists. Use Update endpoint if need to update the project.",
            )
        }

        return projectMapper.dtoToEntity(projectDTO).run {
            projectRepository.add(this)
        }.let {
            projectMapper.entityToDto(it)
        }.also {
            logger.info("Project $projectId added to project")
        }
    }

    /**
     * Updates an existing project in the repository.
     *
     * @param projectDto the [ProjectDto] containing updated details of the project
     * @return the updated [ProjectDto]
     * @throws org.radarbase.appserver.jersey.exception.InvalidProjectDetailsException if the input contains invalid project data
     * @throws org.radarbase.jersey.exception.HttpNotFoundException if the project to update does not exist
     */
    suspend fun updateProject(projectDto: ProjectDto): ProjectDto {
        checkInvalidProjectDetails(
            projectDto,
            { projectDto.id == null },
            { "The 'id' of the project must be supplied for updating project" },
        )

        val savedProject = projectRepository.update(projectMapper.dtoToEntity(projectDto))
            ?: throw HttpNotFoundException(
                "project_not_found",
                "Project with id ${projectDto.id} does not exists. Please create project first",
            )

        return projectMapper.entityToDto(savedProject)
    }

    companion object {
        private val logger = LoggerFactory.getLogger(ProjectService::class.java)
    }
}
