
import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.dsl.KotlinVersion
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'pmd'
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'scala'
    id 'checkstyle'
    id 'io.gatling.gradle' version '3.9.2.1'
    id 'com.github.johnrengelman.shadow' version '8.1.0'
    id 'org.springframework.boot' version '3.3.3'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.github.ben-manes.versions' version "0.46.0"
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id "org.jetbrains.kotlin.plugin.allopen" version "1.9.25"
    id "org.jetbrains.kotlin.plugin.spring" version "1.9.25"
}

group = 'org.radarbase'
version = '2.4.3'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

kotlin {
    jvmToolchain(17)
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

repositories {
    mavenCentral()
    maven { url = "https://oss.sonatype.org/content/repositories/snapshots" }
}

springBoot {
    mainClass.set('org.radarbase.appserver.AppserverApplicationKt')
}

bootJar {
    mainClass = 'org.radarbase.appserver.AppserverApplicationKt'
    duplicatesStrategy = 'include'
}

jar {
    duplicatesStrategy = 'include'
}

ext {
    springBootVersion = '3.3.3'
    springVersion = '6.0.6'
    springOauth2Version = "2.5.2.RELEASE"
    springOauth2AutoconfigureVersion = "2.6.8"
    springDocVersion = '2.2.0'
    lombokVersion = '1.18.26'
    junit5Version = '5.9.2'
    radarSpringAuthVersion = '1.2.1'
    springSecurityVersion = '6.0.5'
    hibernateValidatorVersion = '8.0.0.Final'
    minioVersion = '8.5.10'
    kotlinVersion = '1.9.25'
    jacksonKotlinVersion = '2.15.4'
    dateTimeVersion = '0.6.1'
}

sourceSets {
    main {
        kotlin {
            srcDirs += 'src/main/java'
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output + test.compileClasspath
            runtimeClasspath += main.output + test.output + test.runtimeClasspath
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-quartz')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-mail')
    implementation group: "org.springframework.security", name: "spring-security-config", version: springSecurityVersion
    implementation('org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:' + springOauth2AutoconfigureVersion)
    implementation('org.springframework.security.oauth:spring-security-oauth2:' + springOauth2Version)
    runtimeOnly("org.hibernate.validator:hibernate-validator:$hibernateValidatorVersion")
    implementation("io.minio:minio:$minioVersion") {
        exclude group: 'org.jetbrains.kotlin'
    }

    // Open API spec
    implementation(group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: springDocVersion)

    //runtimeOnly('org.springframework.boot:spring-boot-devtools')
    runtimeOnly('org.hsqldb:hsqldb')
    runtimeOnly('org.liquibase:liquibase-core:4.20.0')
    runtimeOnly(group: 'org.postgresql', name: 'postgresql', version: '42.5.5')


    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    implementation group: 'org.projectlombok', name: 'lombok', version: lombokVersion

    annotationProcessor "org.springframework:spring-context-indexer:$springVersion"

    // FCM Admin SDK
    implementation('com.google.firebase:firebase-admin:9.3.0') {
        // Possibly remove these constraints when a newer version of firebase-adkon is available.
        constraints {
            implementation('com.google.protobuf:protobuf-java:3.25.5') {
                because 'Provided version of protobuf has security vulnerabilities'
            }
            implementation('com.google.protobuf:protobuf-java-util:3.25.5') {
                because 'Provided version of protobuf has security vulnerabilities'
            }
        }
    }

    // AOP
    runtimeOnly group: 'org.springframework', name: 'spring-aop', version: springVersion
    implementation(group: 'org.radarbase', name: 'radar-spring-auth', version: radarSpringAuthVersion)

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonKotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-datetime:$dateTimeVersion"

    testImplementation group: 'io.gatling.highcharts', name: 'gatling-charts-highcharts', version: '3.9.2'

    implementation('org.liquibase.ext:liquibase-hibernate6:4.20.0')

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit', module: 'junit'
    }

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: junit5Version
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit5Version
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit5Version
    testImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: '1.8.2'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.8.2'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-engine', version: '1.8.2'

    gatlingImplementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
}

javafx {
    version = "19"
    modules = [ 'javafx.controls' ]
}

checkstyle {
    configDirectory.set(file("config/checkstyle"))
    toolVersion = "10.8.0"
    showViolations = false
    ignoreFailures = true
    sourceSets = [it.sourceSets.main]
}

javadoc {
    options.addBooleanOption('html5', true)
    destinationDir = new File("${project.rootDir}/src/main/resources/static/java-docs".toString())
}

wrapper {
    gradleVersion '8.5'
}

test {
    useJUnitPlatform() {
        excludeEngines 'junit-vintage'
    }
}

tasks.withType(KotlinCompile).configureEach {
    compilerOptions {
        jvmTarget = JvmTarget.JVM_17
        apiVersion = KotlinVersion.KOTLIN_1_9
        languageVersion = KotlinVersion.KOTLIN_1_9
    }
}

tasks.register('unpack', Copy) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

tasks.register('loadTest', JavaExec) {
    dependsOn testClasses
    description = "Load Test With Gatling"
    group = "Load Test"
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = [
            "-Dgatling.core.directory.binaries=${sourceSets.main.output.classesDirs.toString()}"
    ]
    mainClass = "io.gatling.app.Gatling"
    args = [
            "--simulation", "org.radarbase.appserver.ApiGatlingSimulationTest",
            "--results-folder", "${buildDir}/gatling-results",
            "--binaries-folder", sourceSets.main.output.classesDirs.toString(),
            "--bodies-folder", sourceSets.main.resources.srcDirs.toList().first().toString() + "/gatling/bodies",
    ]
}

tasks.register('integrationTest', Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnitPlatform() {
        excludeEngines 'junit-vintage'
    }
    environment "RADAR_IS_CONFIG_LOCATION", "src/integrationTest/resources/radar-is.yml"

    shouldRunAfter test
}

tasks.register('downloadDependencies') {
    description = "Pre-downloads dependencies"
    configurations.compileClasspath.files
    configurations.runtimeClasspath.files
}

tasks.register('copyDependencies', Copy) {
    from configurations.runtimeClasspath.files
    into "$buildDir/third-party/"
}

rootProject.tasks.named("processIntegrationTestResources") {
    duplicatesStrategy = 'include'
}

check.dependsOn integrationTest

test {
    testLogging {
        events "failed"
        exceptionFormat "full"

        error {
            exceptionFormat "full"
        }
    }
}

def isNonStable = { String version ->
    def stableKeyword = ["RELEASE", "FINAL", "GA"].any { version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

pmd {
    sourceSets = [sourceSets.main]
}
