buildscript {
    ext {
        springBootVersion = '2.3.3.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
plugins {
    id 'checkstyle'
    id 'pmd'
    id "com.github.spotbugs" version "4.5.0"
    id 'jacoco'
    id "com.github.lkishalmi.gatling" version "3.3.4"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'scala'

group = 'org.radarbase'
version = '1.0.1-SNAPSHOT'
sourceCompatibility = 1.11

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
    maven { url "http://dl.bintray.com/typesafe/maven-releases" }
    maven { url 'https://dl.bintray.com/radar-cns/org.radarcns' }
    maven { url "https://dl.bintray.com/radar-base/org.radarbase" }
}

configurations { codacy }

bootJar {
    mainClassName = 'org.radarbase.appserver.AppserverApplication'
}

//apply from: 'gradle/liquibase.gradle'

ext {
    smackVersion = '4.3.1'
    springDocVersion = '1.2.33'
    springInegrationXmppVersion = '5.2.4.RELEASE'
    lombokVersion = '1.18.12'
    bootAdminVersion = '2.2.2'
    throwingFunctionVersion = '1.5.0'
    junit5Version = '5.6.0'
    radarSpringAuthVersion = '1.0.0'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output + test.compileClasspath
            runtimeClasspath += main.output + test.output + test.runtimeClasspath
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}


dependencies {
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-data-rest')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-integration')
    implementation('org.springframework.boot:spring-boot-starter-quartz')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation group: 'com.pivovarit', name: 'throwing-function', version: throwingFunctionVersion

    compile(group: 'de.codecentric', name: 'spring-boot-admin-starter-client', version: bootAdminVersion)
    implementation(group: 'org.springframework.security.oauth.boot', name: 'spring-security-oauth2-autoconfigure', version: springBootVersion)

    // Fix potential vulnerabilities
    compile(group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: '2.5.0.RELEASE')

    // XMPP
    compile group: 'org.springframework.integration', name: 'spring-integration-xmpp', version: springInegrationXmppVersion
    compile(group: 'org.igniterealtime.smack', name: 'smack-experimental', version: smackVersion)

    // Open API spec
    compile(group: 'org.springdoc', name: 'springdoc-openapi-ui', version: springDocVersion)

    compile 'org.scala-lang:scala-library:2.13.3'

    //runtimeOnly('org.springframework.boot:spring-boot-devtools')
    runtimeOnly('org.hsqldb:hsqldb')
    runtimeOnly('org.liquibase:liquibase-core')
    runtime('com.h2database:h2:1.4.200')
    runtime(group: 'org.postgresql', name: 'postgresql', version: '42.2.15')

    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion

    annotationProcessor "org.springframework:spring-context-indexer:5.2.8.RELEASE"

    compileOnly 'net.jcip:jcip-annotations:1.0'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.12'

    // FCM Admin SDK
    implementation 'com.google.firebase:firebase-admin:7.0.0'

    // AOP
    runtimeOnly group: 'org.springframework', name: 'spring-aop', version: '5.3.2'
    implementation(group: 'org.radarbase', name: 'radar-spring-auth', version: radarSpringAuthVersion) {
        exclude group: 'javax.servlet', module: 'servlet-api'
    }

    codacy 'com.github.codacy:codacy-coverage-reporter:-SNAPSHOT'

    testCompile group: 'io.gatling.highcharts', name: 'gatling-charts-highcharts', version: '3.3.1'
    //compile('org.liquibase.ext:liquibase-hibernate5:3.6')
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit', module: 'junit'
    }
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: junit5Version
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit5Version
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit5Version
    testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-commons', version: '1.6.2'
    testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.6.2'
    testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-engine', version: '1.6.2'

    testCompileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.3'

    gatling('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
}

checkstyle {
    configDir file("config/checkstyle")
    toolVersion "8.20"
    showViolations = false
}

pmd {
    toolVersion "6.14.0"
}

javadoc {
    options.addBooleanOption('html5', true)
    destinationDir = new File("${project.rootDir}/src/main/resources/static/java-docs".toString())
}

wrapper {
    gradleVersion '6.6'
}

test {
    useJUnitPlatform() {
        excludeEngines 'junit-vintage'
    }
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    ]
}

task loadTest(type: JavaExec) {
    dependsOn testClasses
    description = "Load Test With Gatling"
    group = "Load Test"
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = [
            "-Dgatling.core.directory.binaries=${sourceSets.main.output.classesDirs.toString()}"
    ]
    main = "io.gatling.app.Gatling"
    args = [
            "--simulation", "org.radarbase.appserver.ApiGatlingSimulationTest",
            "--results-folder", "${buildDir}/gatling-results",
            "--binaries-folder", sourceSets.main.output.classesDirs.toString(),
            "--bodies-folder", sourceSets.main.resources.srcDirs.toList().first().toString() + "/gatling/bodies",
    ]
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    shouldRunAfter test
}

check.dependsOn integrationTest

integrationTest {
    useJUnitPlatform() {
        excludeEngines 'junit-vintage'
    }
    environment "RADAR_IS_CONFIG_LOCATION", "src/integrationTest/resources/radar_is.yml"
}

test {
    testLogging {
        events "failed"
        exceptionFormat "full"

        error {
            exceptionFormat "full"
        }
    }
}